#!/usr/bin/env python
# coding: utf-8
# <div style="border:solid Chocolate 2px; padding: 40px">
#
# <b> –Æ—Ä–∏–π, –ø—Ä–∏–≤–µ—Ç!üëã</b>
#
# –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–∏—Ä–∏–ª–ª –í–∞—Å–∏–ª—å–µ–≤, —è –±—É–¥—É —Ä–µ–≤—å—é–µ—Ä–æ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—â–∞—Ç—å—Å—è –Ω–∞ ¬´—Ç—ã¬ª, –Ω–æ –µ—Å–ª–∏ –ø—Ä–∏–≤—ã—á–Ω–µ–µ –Ω–∞ ¬´–≤—ã¬ª, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º!
#
# –Ø –±—É–¥—É –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π –∏—Ö, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –≤ —Å–ª—É—á–∞–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
#
# –¢—ã –º–æ–∂–µ—à—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –∏—Ö –≤ Markdown-—è—á–µ–π–∫–∞—Ö, —Ç–∞–∫ –∏ –≤—ã–¥–µ–ª–∏–≤ –∏—Ö —Ü–≤–µ—Ç–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, <font color='blue'>—Å–∏–Ω–∏–º</font>. –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥, —É–¥–æ–±–Ω–µ–µ.
#
# –°–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —è –±—É–¥—É –æ–±–æ–∑–Ω–∞—á–∞—Ç—å <font color='green'>–∑–µ–ª–µ–Ω—ã–º</font>, <font color='gold'>–∂–µ–ª—Ç—ã–º</font> –∏ <font color='red'>–∫—Ä–∞—Å–Ω—ã–º</font> —Ü–≤–µ—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
#
# <br/>
#
# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#
# <b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º. –ó–¥–µ—Å—å –∂–µ —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
# </div>
#
# <br/>
#
# <div class="alert alert-warning">
#     <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –ª—É—á—à–µ, –µ—Å–ª–∏ –≤–Ω–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã.
# </div>
#
# <br/>
# <div class="alert alert-block alert-danger">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#
#
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞, –µ—Å–ª–∏ —Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–≥–∏.
# </div>
#
# –£–≤–∏–¥–µ–≤ —É —Ç–µ–±—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å, –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —è –ª–∏—à—å —É–∫–∞–∂—É –Ω–∞ –µ–µ –Ω–∞–ª–∏—á–∏–µ –∏ –¥–∞–º —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–µ. –ù–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ç–≤–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å —Ç–∞–∫–∂–µ. –ù–æ –µ—Å–ª–∏ —Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π - –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —è –¥–∞–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É!

# <h1>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ<span class="tocSkip"></span></h1>
# <div class="toc"><ul class="toc-item"><li><span><a href="#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö" data-toc-modified-id="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</a></span></li><li><span><a href="#–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏" data-toc-modified-id="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</a></span></li><li><span><a href="#–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º" data-toc-modified-id="–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>–ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º</a></span></li><li><span><a href="#–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏" data-toc-modified-id="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</a></span></li><li><span><a href="#–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞" data-toc-modified-id="–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>–ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</a></span></li></ul></div>

# # –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤

# –ò–∑ ¬´–ë–µ—Ç–∞-–ë–∞–Ω–∫–∞¬ª —Å—Ç–∞–ª–∏ —É—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –∑–∞–º–µ—Ç–Ω–æ. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –ø–æ—Å—á–∏—Ç–∞–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö.
#
# –ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –±–∞–Ω–∫–æ–º.
#
# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª—å —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º *F1*-–º–µ—Ä—ã. –ß—Ç–æ–±—ã —Å–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫—É –¥–æ 0.59. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ *F1*-–º–µ—Ä—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ *AUC-ROC*, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Å *F1*-–º–µ—Ä–æ–π.
#
# –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling](https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling)

# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[1]:


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.dummy import DummyClassifier
from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score
from sklearn.utils import shuffle
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
import matplotlib.pyplot as plt

data = pd.read_csv('/datasets/Churn.csv')
data.info()
data.head(20)


# –í —Å—Ç–æ–ª–±—Ü–µ "Tenure ‚Äî —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —á–µ–ª–æ–≤–µ–∫ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º –±–∞–Ω–∫–∞" –∏–º–µ—é—Ç—Å—è –ø—Ä–æ–ø—É—Å–∫–∏, –ø–æ—á—Ç–∏ 10%.
# –ú—ã –º–æ–∂–µ–º:
# —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏
# –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–º—É—Å–∫–∏ –º–µ–¥–∏–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏
# –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–º—É—Å–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏
#
# –¢–∞–∫ –∫–∞–∫ –ø—Ä–æ–ø—É—Å–∫–∏ –∏–º–µ—é –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç –æ–±—â–µ–π –º–∞—Å—Å—ã, —è —Å—á–∏—Ç–∞—é —á—Ç–æ –ª—É—á—à–µ –∏—Ö —É–¥–∞–ª–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å —Å–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–µ—Å –≤ —Å–ª—É—á–∞–∏ –∏—Ö –∑–∞–ø–æ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∏–º–µ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
#

# In[2]:


data = data.dropna(subset=['Tenure'])


# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥–∞–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –ø–æ—Å—Ç–µ –∑–∞–ø–æ–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
#

# In[3]:


data.describe()


# In[4]:


data.describe(include='all')


#  –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

# In[5]:


data.duplicated().sum()


# –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

# In[6]:


print(data['Geography'].unique())
print(data['Gender'].unique())


# –ü—Ä–æ–≤–µ—Ä–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏ –∏ —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏. –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
#

# –í—ã–≤–æ–¥
# –ú—ã —Ä–∞—Å–º–æ–æ—Ç—Ä–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–∞—à–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ Tenure –∏ —É–¥–∞–ª–∏–ª–∏ –∏—Ö —á—Ç–æ –±—ã –æ–Ω–∏ –Ω–µ –≤–ª–∏—è–ª–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç—Ç–µ –∏–∑ 10 000 —É –Ω–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å 9091 —Å—Ç—Ä–æ–∫. –¢–∞–∫ –∂–µ –ø—Ä–æ–≤–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥—É–±–ª–∏ - –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫ –∏–ª–∏ –∑–∞–¥–≤–æ–µ–Ω–∏–π, –æ–Ω–∏ —Ç–∞–∫–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.

# ## –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

# –£–¥–∞–ª–∏–º –ª–∏—à–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è

# In[7]:


drop = ['RowNumber', 'CustomerId', 'Surname']
data = data.drop(drop, axis=1)
data.head()


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ OHE –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–∞–º–º–∏ –ª–æ–≤—É—à–∫–∏

# In[8]:


data = pd.get_dummies(data, drop_first=True)
data.head()


# –†–∞–∑–¥–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 2 –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫

# In[9]:


features = data.drop('Exited', axis=1)
target = data['Exited']


# –°–æ–∑–¥–∞—Ç–∏–º 3 –≤—ã–±–æ—Ä–∫–∏
# –û–±—É—á–≤—é—â–∞—è - 60% features_train –∏ target_train
# –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è - 20% features_valid –∏ target_valid
# –¢–µ—Å—Ç–æ–≤–∞—è - 20% features_test –∏ target_test
#
#
#
#
#

# In[10]:


features_train, features_validtest, target_train, target_validtest = train_test_split(
    features, target, train_size=0.6, random_state=12345)
features_valid, features_test, target_valid, target_test = train_test_split(
    features_validtest, target_validtest, train_size=0.5, random_state=12345)


# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª –ø—Ä–∏–∑–Ω–∞–∫–∏

# In[11]:


numeric = ['CreditScore', 'Age', 'Tenure',
           'Balance', 'NumOfProducts', 'EstimatedSalary']
scaler = StandardScaler()
scaler.fit(features_train[numeric])
features_train[numeric] = scaler.transform(features_train[numeric])
print('–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏\n', features_train.head())
features_valid[numeric] = scaler.transform(features_valid[numeric])
print('–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏ \n',
      features_valid.head())
features_test[numeric] = scaler.transform(features_test[numeric])
print('–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ \n', features_test.head())


# –°–æ–∑–¥–∞–Ω–∏–º —Ñ—É–Ω–∫–∏—é –¥–ª—è –º–µ—Ç—Ä–∏–∫

# In[12]:


def f1(target_valid, prediction):
    print("–ü–æ–ª–Ω–æ—Ç–∞", recall_score(target_valid, prediction))
    print("–¢–æ—á–Ω–æ—Å—Ç—å", precision_score(target_valid, prediction))
    print("F1-–º–µ—Ä–∞", f1_score(target_valid, prediction))


# –†–∞—Å—Å–º–æ—Ç—Ä–∏ –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π

# In[13]:


f1_res = 0
for depth in range(1, 20, 1):
    model_DTC = DecisionTreeClassifier(max_depth=depth, random_state=12345)
    model_DTC.fit(features_train, target_train).score(
        features_valid, target_valid)
    model_DTC_prediction = model_DTC.predict(features_valid)

    res = f1_score(target_valid, model_DTC_prediction)
    if f1_res < res:
        p = model_DTC_prediction
        f1_res = res

        depth_model = depth
    print('depth', depth, 'F1:', f1_score(target_valid, model_DTC_prediction))
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç depth', depth_model, 'F1:', f1_score(target_valid, p))


# –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏ F1- 0.5764331210191083 –ø—Ä–∏ 7 –¥–µ—Ä–µ–≤—å–µ–≤

# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –º–æ–¥–µ–ª—å –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏

# In[14]:


model_LG = LogisticRegression(solver='liblinear')
model_LG.fit(features_train, target_train).score(features_valid, target_valid)
model_LG_prediction = model_LG.predict(features_valid)
print(f1(target_valid, model_LG_prediction))


# –†–∞—Å–º–æ—Ç—Ä–∏–º –º–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω—ã –ª–µ—Å

# In[15]:


f1_res = 0
for est in range(10, 51, 10):
    for depth in range(1, 12):
        model_RFC = RandomForestClassifier(
            n_estimators=est, max_depth=depth, random_state=12345)
        model_RFC.fit(features_train, target_train)
        model_RFC_prediction = model_RFC.predict(features_valid)
        res = f1_score(target_valid, model_RFC_prediction)
        if f1_res < res:
            p = model_RFC_prediction
            f1_res = res
            est_model = est
            depth_model = depth
        print('estim', est, 'depth', depth, 'F1:',
              f1_score(target_valid, model_RFC_prediction))
print('--------------------------------')
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç estim', est_model, 'depth', depth_model)
print(f1(target_valid, p))


# –í—ã–≤–æ–¥
# –ú—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–µ–ª–∏ 3 –º–æ–¥–µ–ª–∏
#  –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç depth 7 F1: 0.5764331210191083
#  –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å–∏—è F1-–º–µ—Ä–∞ 0.30400000000000005
#  —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç estim 40 depth 11 F1-–º–µ—Ä–∞ 0.5796610169491526
#
# –ü–æ –∏—Ç–æ–≥—É –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞–ª —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å, –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –Ω–µ –Ω–∞–º–Ω–æ–≥–æ –æ—Ç—Å—Ç–∞–ª–æ

# ## –ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º

# –£–≤–µ–ª–∏—á–∏–º –≤—ã–±–æ—Ä–∫—É —Ä–µ–¥–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤  —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–∏–∫–∏–∫ –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥

# In[17]:


def upsampling(features, target, repeat):
    # –†–∞–∑–¥–µ–ª—è–µ–º –≤—ã–±–æ—Ä–∫—É –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    target_one = target[target == 1]
    target_null = target[target == 0]
    features_one = features[target == 1]
    features_null = features[target == 0]

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏ —Å–æ–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    upsampling_features = pd.concat([features_null]+[features_one]*repeat)
    upsampling_target = pd.concat([target_null]+[target_one]*repeat)

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    upsampling_features, upsampling_target = shuffle(
        upsampling_features, upsampling_target, random_state=1234)

    return upsampling_features, upsampling_target


features_upsampled, target_upsampled = upsampling(
    features_train, target_train, 4)
print(target_upsampled.shape)


# –ø–æ–ø—Ä–∞–≤–∏–ª

# In[ ]:


# –£–º–µ–Ω—å—à–∏ –≤—ã–±–æ—Ä–∫—É —á–∞—Å—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤  —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–∏–∫–∏–∫ –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥

# In[18]:


def downsample(features, target, fraction):
    features_zeros = features[target == 0]
    features_ones = features[target == 1]
    target_zeros = target[target == 0]
    target_ones = target[target == 1]

    features_downsampled = pd.concat([features_zeros.sample(
        frac=fraction, random_state=12345)] + [features_ones])
    target_downsampled = pd.concat([target_zeros.sample(
        frac=fraction, random_state=12345)] + [target_ones])

    features_downsampled, target_downsampled = shuffle(
        features_downsampled, target_downsampled, random_state=12345)

    return features_downsampled, target_downsampled


features_downsampled, target_downsampled = downsample(
    features_train, target_train, 0.25)
print(target_downsampled.shape)


# –í—ã–≤–æ–¥:
# –¢–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Downsampling –∫—Ä–∞–π–Ω–µ –º–∞–ª–æ, –º—ã –µ–≥–æ –Ω–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
#

# –≤—á–µ—Ä–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–¥–µ–ª–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞—é —Å —É—Ç—Ä–∞ –∏ –≤—Å—ë –ø—Ä–æ–ø–∞–ª–æ.... —É–∂ –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ —Ç–∞–∫...

# —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –ø–æ—Å–ª–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

# In[19]:


f1_res = 0
for depth in range(1, 20, 1):
    model_DTC_upsampled = DecisionTreeClassifier(
        max_depth=depth, random_state=12345)
    model_DTC_upsampled.fit(features_upsampled, target_upsampled)
    model_DTC_upsampled_prediction = model_DTC_upsampled.predict(
        features_valid)

    res = f1_score(target_valid, model_DTC_upsampled_prediction)
    if f1_res < res:
        p = model_DTC_upsampled_prediction
        f1_res = res

        depth_model = depth
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç upsampled - depth',
      depth_model, 'F1:', f1_score(target_valid, p))


f1_res = 0
for depth in range(1, 20, 1):
    model_DTC_downsampled = DecisionTreeClassifier(
        max_depth=depth, random_state=12345)
    model_DTC_downsampled.fit(features_downsampled, target_downsampled)
    model_DTC_downsampled_prediction = model_DTC_downsampled.predict(
        features_valid)

    res = f1_score(target_valid, model_DTC_downsampled_prediction)
    if f1_res < res:
        p = model_DTC_downsampled_prediction
        f1_res = res

        depth_model = depth
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç downsampled - depth',
      depth_model, 'F1:', f1_score(target_valid, p))


# —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª depth 7 F1: 0.5764331210191083. –ú–æ–¥–µ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è

# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –º–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å

# In[20]:


f1_res = 0
for est in range(10, 51, 10):
    for depth in range(1, 12):
        model_RFC_upsampled = RandomForestClassifier(
            n_estimators=est, max_depth=depth, random_state=12345)
        model_RFC_upsampled.fit(features_downsampled, target_downsampled)
        model_RFC_upsampled_prediction = model_RFC_upsampled.predict(
            features_valid)
        res = f1_score(target_valid, model_RFC_upsampled_prediction)
        if f1_res < res:
            p = model_RFC_upsampled_prediction
            f1_res = res
            est_model = est
            depth_model = depth
print('--------------------------------')
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç upsampled - estim', est_model, 'depth', depth_model)
print(f1(target_valid, p))

f1_res = 0
for est in range(10, 51, 10):
    for depth in range(1, 12):
        model_RFC_downsampled = RandomForestClassifier(
            n_estimators=est, max_depth=depth, random_state=12345)
        model_RFC_downsampled.fit(features_downsampled, target_downsampled)
        model_RFC_downsampled_prediction = model_RFC.predict(features_valid)
        res = f1_score(target_valid, model_RFC_downsampled_prediction)
        if f1_res < res:
            p = model_RFC_downsampled_prediction
            f1_res = res
            est_model = est
            depth_model = depth
print('--------------------------------')
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç downsampled -  estim', est_model, 'depth', depth_model)
print(f1(target_valid, p))


# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ upsampled —É–ª—É—á—à–µ–ª–∏—Å—å. –ü—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç estim 40 depth 11 F1-–º–µ—Ä–∞ 0.5796610169491526

# —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é

# In[21]:


model_LG_upsampled = LogisticRegression(
    solver='liblinear', class_weight='balanced')
model_LG_upsampled.fit(features_upsampled, target_upsampled)
LG_prediction_upsampled = model_LG_upsampled.predict(features_valid)
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç upsampled - ',
      f1(target_valid, LG_prediction_upsampled))
print()
model_LG_downsampled = LogisticRegression(
    solver='liblinear', class_weight='balanced')
model_LG_downsampled.fit(features_downsampled, target_downsampled)
LG_prediction_downsampled = model_LG_downsampled.predict(features_valid)
print('–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç downsampled - ',
      f1(target_valid, LG_prediction_downsampled))


# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–ª—å–Ω–æ —É–ª—É—á—à–µ–ª–∏—Å—å –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç F1-–º–µ—Ä–∞ 0.30400000000000005

# –í—ã–≤–æ–¥
# - —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
#     –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç upsampled F1-–º–µ—Ä–∞ 0.6072874493927125
#     –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç downsampled F1-–º–µ—Ä–∞ 0.5660377358490567
#     –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ upsampled —É–ª—É—á—à–µ–ª–∏—Å—å, –µ—ë –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏ –≤–æ–∑—å–º–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è(estim 40 depth 8). –ü—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç estim 40 depth 11 F1-–º–µ—Ä–∞ 0.5796610169491526
#
# -–¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
#     –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç upsampled - depth 5 F1: 0.5735449735449736
#     –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç downsampled - depth 6 F1: 0.5636704119850188
#     —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª depth 7 F1: 0.5764331210191083. –ú–æ–¥–µ–ª—å —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
#
# - –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å–∏—è
#     –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç upsampled F1-–º–µ—Ä–∞ 0.509731232622799
#     –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç downsampled F1-–º–µ—Ä–∞ 0.5059360730593607
#
# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–ª—å–Ω–æ —É–ª—É—á—à–µ–ª–∏—Å—å –ø—Ä–æ—à–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç F1-–º–µ—Ä–∞ 0.30400000000000005

# ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏

# –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π

# In[32]:


model = RandomForestClassifier(bootstrap=True, class_weight='balanced', max_depth=8,
                               n_estimators=40, random_state=12345)

model.fit(features_upsampled, target_upsampled)
predicted_test = model.predict(features_test)
probabilities_test = model.predict_proba(features_test)
probabilities_one_test = probabilities_test[:, 1]
fpr, tpr, thresholds = roc_curve(target_test, probabilities_one_test)


auc_roc = roc_auc_score(target_test, probabilities_one_test)
print('AUC-ROC', auc_roc)
plt.plot(fpr, tpr, label='RandomForestClassifier - balanced')
plt.plot([0, 1], [0, 1], linestyle='--')
plt.xlim([0, 1])
plt.ylim([0, 1])

plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")

plt.legend(loc='lower right', fontsize='x-large')

plt.title("ROC-–∫—Ä–∏–≤–∞—è")
plt.show()


print(f1(target_test, predicted_test))


# –°–¥–µ–ª–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—É—é –º–æ–¥–µ–ª—å

# –£–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á.

# –í—ã–≤–æ–¥
# –ù–∞–º  —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á —Ü–µ–ª–∏ –≤ 0,59 –ø–æ —Ñ1. –ú–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –æ–∫–∞–∑–∞–ª–∞—Å—å –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å.
#
#
#
# –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ —Å–æ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º AUC-ROC = 0.861.
#
# –¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å–∞–º 0.861, precision 0.50, recall 0.71 –∏ f1 0.59. –ú–æ–¥–µ–ª—å —Å—Ç–∞—Ä–∞–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —á–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å. –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫–ª–∞—Å—Å—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∏–π.
#
#
#
#
